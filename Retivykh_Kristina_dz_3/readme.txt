Затруднений, как таковых, не возникло. Пришлось повозиться, чтобы начать мыслить в ключе map, лямбда функций. Тренировалась так: сначала писала код "в лоб", потом переписывала решение c помощью map, lambda, filter

1) по вопросам num_translate:
Подумайте, как и где лучше хранить информацию, необходимую для перевода: какой тип данных выбрать, в теле функции или снаружи.

В данном случае выбрала хранить внутри функции из-за области видимости, т.к. меньше шансов "зацепить" данные при решении остальных задач.
Причем в расширенном варианте я обращалась к более простой функции. В проекте я бы вынесла в отдельный модуль const.py или что-то вроде того и хранила бы в константах, а сюда бы импортировала. Видела такое решение где-то, нахожу его логичным. Если же речь о большем количестве данных, не только о числах от 0 до 10, то вообще хранила бы в базе данных.

Тип данных: выбрала словарь, т.к. там уже есть втроенный метод get, который возвращает требуемый задачей None в случае отсутствия ключа.

2) Задачу с тезаурусом решила без оператора распаковки, но про него почитала. И по итогу сначала использовала его в задаче с шутками, но потом переписала решение без него, так оказалось короче. Потом вспомнила, что встречала в боевых проектах решение с zip и чаще всего он использовался с данными о пользователях/клиентах (почти как в примере из методички)

С сортировкой - затыка не было, но времени потратила больше на понимание, как что работает и эксперименты. Вот что вынесла: при сортировке словаря его сначал анужно преобразовать в список кортежей, что делает метод .items(), а затем уже сортировать, указав, что является ключом. После сортировки обратно преобразовываем в dict

3) по задаче с шутками: флаг добавить смогла, задала ему значение по умолчанию. Сделать аргументы именованными смогла.